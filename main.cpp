#include "parser.h"

int main(int argc, char** argv)
{
    const int DEFAULT_WIDTH = 640;
    const int DEFAULT_HEIGHT = 480;
    const int FOVY = 60;
    if (argc != 2)
    {
        std::cout << "Usage: ./stlparser [FILE.stl]" << std::endl;
        return 1;
    }
    //parsed models
    std::vector<ParserInfo> parsedModels;
    std::vector<vec3> vertices;
    std::vector<triangle> triangles;
    std::vector<std::string> fnames;
    for (int i = 1; i < argc; i++)
        fnames.push_back(std::string(*(argv + i)));
    //will eventually become total number of vertices
    long unsigned int firstVertex = 0;
    //parse all models
    for (int i = 0; i < fnames.size(); i++)
    {
        ParserInfo cur = parse(fnames[i], firstVertex);
        for (vec3 i : cur.verts)
            vertices.push_back(i);
        for (triangle i : cur.tris)
            triangles.push_back(i);
        firstVertex += cur.verts.size();
        parsedModels.push_back(cur);
    }
    //center x, y, z
    double cenX = 0, cenY = 0, cenZ = 0;
    //max x, y, z
    float maxX = parsedModels[0].maxX, maxY = parsedModels[0].maxY, maxZ = parsedModels[0].maxZ;
    //min x, y, z
    float minX = parsedModels[0].minX, minY = parsedModels[0].minY, minZ = parsedModels[0].minZ;
    //get total x, y, and z
    for (ParserInfo i : parsedModels)
    {
        cenX += i.totalX;
        cenY += i.totalY;
        cenZ += i.totalZ;
        maxX = std::max(maxX, i.maxX);
        maxY = std::max(maxY, i.maxY);
        maxZ = std::max(maxZ, i.maxZ);
        minX = std::min(minX, i.minX);
        minY = std::min(minY, i.minY);
        minZ = std::min(minZ, i.minZ);
    }
    //compute center
    float centerX = (float) (cenX / firstVertex);
    float centerY = (float) (cenY / firstVertex);
    float centerZ = (float) (cenZ / firstVertex);
    //create output file stream
    std::ofstream outputfile(fnames[0] + "-and-others" + ".test");
    //write comment
    outputfile << "# AUTOGENERATED FILE: TODO FIX EYE AND ADD LIGHTS!" << "\n";
    outputfile << "# For light decision purposes: maxX = " << maxX << " minX = " << minX << "\n"; 
    outputfile << "# For light decision purposes: maxY = " << maxY << " minY = " << minY << "\n"; 
    outputfile << "# For light decision purposes: maxZ = " << maxZ << " minZ = " << minZ << "\n"; 
    //write default size
    outputfile << "size " << DEFAULT_WIDTH << " " << DEFAULT_HEIGHT << "\n";
    //write maxverts
    outputfile << "maxverts " << firstVertex << "\n";
    //write camera info
    outputfile << "camera ";
    //eye is at 2minz - maxz
    outputfile << centerX << " " << centerY << " " << (2 * minZ - maxZ);
    //assume center is at origin
    outputfile << " " << centerX << " " << centerY << " " << centerZ << " ";
    //upvector is at +y
    outputfile << "0 1 0 ";
    //set fov to 60
    outputfile << FOVY << "\n";
    //write output file name
    outputfile << "output " << fnames[0] << "-and-others" << ".png" << "\n\n";
    outputfile << "directional 1 1 1 1 1 1\n";
    outputfile << "directional -1 1 1 1 1 1\n";
    outputfile << "directional 1 -1 1 1 1 1\n";
    outputfile << "directional 1 1 -1 1 1 1\n";
    outputfile << "directional -1 -1 1 1 1 1\n";
    outputfile << "directional 1 -1 -1 1 1 1\n";
    outputfile << "directional -1 1 -1 1 1 1\n";
    outputfile << "directional 1 -1 -1 1 1 1\n";
    outputfile << "directional -1 -1 -1 1 1 1\n";
    //write ambient lighting
    outputfile << "specular 1 0.84313 0\n";
    //write every vertex
    for (vec3 curVec : vertices)
        outputfile << "vertex " << curVec.x << " " << curVec.y << " " << curVec.z << "\n";
    //write every triangle
    for (triangle tri : triangles)
        outputfile << "stltri " << tri.normal.x << " " << tri.normal.y << " " << tri.normal.z << " "
        << tri.aPos << " " << tri.bPos << " " << tri.cPos << "\n";
}