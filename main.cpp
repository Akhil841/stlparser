#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cmath>
#include <cfloat>

struct vec3 {
    float x;
    float y;
    float z;
};

struct triangle{
    vec3 normal;
    unsigned int aPos;
    unsigned int bPos;
    unsigned int cPos;
};

vec3 normalize(vec3 in)
{
    //compute magnitude
    float magnitude = in.x * in.x + in.y * in.y + in.z * in.z;
    magnitude = std::sqrt(magnitude);
    //apply magnitude
    in.x /= magnitude;
    in.y /= magnitude;
    in.z /= magnitude;
    //return normalized vector
    return in;
}

int main(int argc, char** argv)
{
    const int DEFAULT_WIDTH = 640;
    const int DEFAULT_HEIGHT = 480;
    const int FOVY = 60;
    if (argc != 2)
    {
        std::cout << "Usage: ./stlparser [FILE.stl]" << std::endl;
        return 1;
    }
    std::string fname = std::string(*(argv + 1));
    std::ifstream inputfile(fname, std::ios::binary);
    //skip header bytes
    for (int i = 0; i < 80; i++)
        inputfile.get();
    //get number of triangles
    unsigned int numOfTriangles;
    inputfile.read((char*)&numOfTriangles, sizeof(numOfTriangles));
    //vertex vector
    std::vector<vec3> vertices;
    //triangle vector
    std::vector<triangle> triangles;
    //for eye calculation purposes
    //min x
    float maxX = -FLT_MAX;
    //max x
    float minX = FLT_MAX;
    //min y
    float maxY = -FLT_MAX;
    //max y
    float minY = FLT_MAX;
    //max z
    float maxZ = -FLT_MAX;
    //min z
    float minZ = FLT_MAX;
    //center x
    float centerX = 0;
    //center y
    float centerY = 0;
    //float center z
    float centerZ = 0;
    //for each triangle
    for (unsigned int i = 0; i < numOfTriangles; i++)
    {
        //current triangle
        triangle tri;
        //get normal vector
        vec3 norm;
        inputfile.read((char*)&norm.x, sizeof(norm.x));
        inputfile.read((char*)&norm.y, sizeof(norm.y));
        inputfile.read((char*)&norm.z, sizeof(norm.z));
        //normalize vector
        norm = normalize(norm);
        tri.normal = norm;
        //get first vertex
        vec3 v1;
        inputfile.read((char*)&v1.x, sizeof(v1.x));
        centerX += v1.x;
        inputfile.read((char*)&v1.y, sizeof(v1.y));
        centerY += v1.y;
        inputfile.read((char*)&v1.z, sizeof(v1.z));
        centerZ += v1.z;
        //set max and min z
        maxX = std::max(maxX, v1.x);
        minX = std::min(minX, v1.x);
        maxY = std::max(maxY, v1.y);
        minY = std::min(minY, v1.y);
        maxZ = std::max(maxZ, v1.z);
        minZ = std::min(minZ, v1.z);
        //set vertex 1 index in triangle
        tri.aPos = vertices.size();
        //push vertex to vertex vector
        vertices.push_back(v1);
        //get second vertex
        vec3 v2;
        inputfile.read((char*)&v2.x, sizeof(v2.x));
        centerX += v2.x;
        inputfile.read((char*)&v2.y, sizeof(v2.y));
        centerY += v2.y;
        inputfile.read((char*)&v2.z, sizeof(v2.z));
        centerZ += v2.z;
        //set max and min z
        maxX = std::max(maxX, v2.x);
        minX = std::min(minX, v2.x);
        maxY = std::max(maxY, v2.y);
        minY = std::min(minY, v2.y);
        maxZ = std::max(maxZ, v2.z);
        minZ = std::min(minZ, v2.z);
        //set vertex 2 index in triangle
        tri.bPos = vertices.size();
        //push vertex to vertex vector
        vertices.push_back(v2);
        //get third vertex
        vec3 v3;
        inputfile.read((char*)&v3.x, sizeof(v3.x));
        centerX += v3.x;
        inputfile.read((char*)&v3.y, sizeof(v3.y));
        centerY += v3.y;
        inputfile.read((char*)&v3.z, sizeof(v3.z));
        centerZ += v3.z;
        //set max and min z
        maxX = std::max(maxX, v3.x);
        minX = std::min(minX, v3.x);
        maxY = std::max(maxY, v3.y);
        minY = std::min(minY, v3.y);
        maxZ = std::max(maxZ, v3.z);
        minZ = std::min(minZ, v3.z);
        //set vertex 3 index in triangle
        tri.cPos = vertices.size();
        //push vertex to vertex vector
        vertices.push_back(v3);
        //push triangle to triangle vector
        triangles.push_back(tri);
        //skip attribute byte count
        short skip;
        inputfile.read((char*)&skip, sizeof(skip));
    }
    centerX /= vertices.size();
    centerY /= vertices.size();
    centerZ /= vertices.size();
    //we have read all of the triangles
    //close the input file
    inputfile.close();
    //create output file stream
    std::ofstream outputfile(fname + ".test");
    //write comment
    outputfile << "# AUTOGENERATED FILE: TODO FIX EYE AND ADD LIGHTS!" << "\n";
    outputfile << "# For light decision purposes: maxX = " << maxX << " minX = " << minX << "\n"; 
    outputfile << "# For light decision purposes: maxY = " << maxY << " minY = " << minY << "\n"; 
    outputfile << "# For light decision purposes: maxZ = " << maxZ << " minZ = " << minZ << "\n"; 
    //write default size
    outputfile << "size " << DEFAULT_WIDTH << " " << DEFAULT_HEIGHT << "\n";
    //write maxverts
    outputfile << "maxverts " << vertices.size() << "\n";
    //write camera info
    outputfile << "camera ";
    //eye is at 2minz - maxz
    outputfile << centerX << " " << centerY << " " << (2 * minZ - maxZ);
    //assume center is at origin
    outputfile << " " << centerX << " " << centerY << " " << centerZ << " ";
    //upvector is at +y
    outputfile << "0 1 0 ";
    //set fov to 60
    outputfile << FOVY << "\n";
    //write output file name
    outputfile << "output " << fname << ".png" << "\n\n";
    //write ambient lighting
    outputfile << "ambient 1 1 1\n";
    //write every vertex
    for (vec3 curVec : vertices)
        outputfile << "vertex " << curVec.x << " " << curVec.y << " " << curVec.z << "\n";
    //write every triangle
    for (triangle tri : triangles)
        outputfile << "stltri " << tri.normal.x << " " << tri.normal.y << " " << tri.normal.z << " "
        << tri.aPos << " " << tri.bPos << " " << tri.cPos << "\n";
}